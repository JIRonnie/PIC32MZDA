{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "ADC polling",
    "title": "ADC polling",
    "content": "This example demonstrates how to sample an analog input in polled mode and send the converted data to console. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html#adc-polling",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#adc-polling"
  },"2": {
    "doc": "ADC polling",
    "title": "Description",
    "content": "In this example, Analog input voltage in the range of 0 V to 3.3 V is fed to the ADC and converted value is displayed on the console.ADC conversion is triggered by software and result is polled using status API. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html#description",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#description"
  },"3": {
    "doc": "ADC polling",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_polled_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "ADC polling",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to the USB UART click board. This will enumerate the USB to UART port | AN9 pin is used for analog input | Use a jumper wire to connect Pin 3 of J14 (AN9 is mapped to Port Pin RPB9) to 3.3 V or GND or external supply Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to the USB UART click board (This will enumerate the USB to UART port) | AN7 pin, which is coming on switches S1 to S5, is used for analog input | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#setting-up-the-hardware"
  },"5": {
    "doc": "ADC polling",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Console displays the ADC count and the ADC input voltage . | For PIC32MX274 XLP Starter Kit, switches S1 to S5 can be pressed in different combinations to get different output | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html#running-the-application"
  },"6": {
    "doc": "ADC polling",
    "title": "ADC polling",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html",
    "relUrl": "/apps/adc/adc_polled_mode/readme.html"
  },"7": {
    "doc": "CAN blocking",
    "title": "CAN blocking",
    "content": "This example application shows how to use the CAN module to transmit and receive normal CAN messages in polling mode. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html#can-blocking",
    "relUrl": "/apps/can/can_normal_operation_blocking/readme.html#can-blocking"
  },"8": {
    "doc": "CAN blocking",
    "title": "Description",
    "content": "This application transmits CAN message to CAN Bus and receives CAN message from CAN Bus. To run this application, an evaluation board and Microchip CAN Bus Analyzer is required . They act as different nodes on the CAN bus. While running the application, user can send and receive CAN messages between the board and the analyzer. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html#description",
    "relUrl": "/apps/can/can_normal_operation_blocking/readme.html#description"
  },"9": {
    "doc": "CAN blocking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/can/can_normal_operation_blocking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx_125_sk.X | MPLABX project for PIC32MX1/2/5 Starter Kit | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/can/can_normal_operation_blocking/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "CAN blocking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx_125_sk.X | PIC32MX1/2/5 Starter Kit | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . |   |   | . Setting up PIC32MX1/2/5 Starter Kit . | To run the demo, the following additional hardware are required: . | Microchip CAN Bus Analyzer | . | Install Microchip CAN Bus Analyzer software on PC | Connect Microchip CAN Bus Analyzer to J6 connector using male to female DB9 serial cable | Connect Microchip CAN Bus Analyzer to PC using USB Male-A to Male Mini-B cable | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer. | . Setting up PIC32 Ethernet Starter Kit . | To run the demo, the following additional hardware are required: . | Microchip CAN Bus Analyzer | Starter Kit I/O Expansion Board | CAN/LIN PICtail (Plus) Daughter Board | . | Install Microchip CAN Bus Analyzer software on PC | Connect J1 connector on board to J1 connector on Starter Kit I/O Expansion Board | Connect J4 connector on Starter Kit I/O Expansion Board to J7 connector on CAN/LIN PICtail (Plus) Daughter Board | Connect Microchip CAN Bus Analyzer to P1 connector on CAN/LIN PICtail (Plus) Daughter Board using female to female DB9 serial cable | Short (close) Jumper J5 on PIC32MX Ethernet Starter Kit II | Connect Microchip CAN Bus Analyzer to PC using USB Male-A to Male Mini-B cable | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/can/can_normal_operation_blocking/readme.html#setting-up-the-hardware"
  },"11": {
    "doc": "CAN blocking",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its respective IDE | Open Microchip CAN Bus Analyzer software and make the following configurations: . | Description | Settings | . | CAN Bitrate Control | 500 Kbps | . | CAN Mode Control | Normal Mode | . | Bus Termination Control | ON | . |   |   | . | Press Switch to transmit message to CAN Bus from board | CAN message will be displayed in the CAN analyzer software | Send following CAN message from CAN analyzer software . | ID : 0x469, DLC : 8, Data: 1, 2, 3, 4, 5, 6, 7, 8 | . | LED toggles at each message transmission or reception . | Board | Switch Name | LED name | . | PIC32MX1/2/5 Starter Kit | SW1 | LED1 | . | PIC32 Ethernet Starter Kit | SW1 | LED1 | . |   |   |   | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html#running-the-application",
    "relUrl": "/apps/can/can_normal_operation_blocking/readme.html#running-the-application"
  },"12": {
    "doc": "CAN blocking",
    "title": "CAN blocking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html",
    "relUrl": "/apps/can/can_normal_operation_blocking/readme.html"
  },"13": {
    "doc": "CAN interrupt",
    "title": "CAN interrupt",
    "content": "This example application shows how to use the CAN module to transmit and receive normal CAN messages in interrupt mode. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html#can-interrupt",
    "relUrl": "/apps/can/can_normal_operation_interrupt_timestamp/readme.html#can-interrupt"
  },"14": {
    "doc": "CAN interrupt",
    "title": "Description",
    "content": "This application transmits CAN message to CAN Bus and receives CAN message from CAN Bus. To run this application, an evaluation board and Microchip CAN Bus Analyzer is required . They act as different nodes on the CAN bus. While running the application, user can send and receive CAN messages between the board and the analyzer. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html#description",
    "relUrl": "/apps/can/can_normal_operation_interrupt_timestamp/readme.html#description"
  },"15": {
    "doc": "CAN interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/can/can_normal_operation_interrupt_timestamp/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx_125_sk.X | MPLABX project for PIC32MX1/2/5 Starter Kit | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/can/can_normal_operation_interrupt_timestamp/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "CAN interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx_125_sk.X | PIC32MX1/2/5 Starter Kit | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . |   |   | . Setting up PIC32MX1/2/5 Starter Kit . | To run the demo, the following additional hardware are required: . | Microchip CAN Bus Analyzer | . | Install Microchip CAN Bus Analyzer software on PC | Connect Microchip CAN Bus Analyzer to J6 connector using male to female DB9 serial cable | Connect Microchip CAN Bus Analyzer to PC using USB Male-A to Male Mini-B cable | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer. | . Setting up PIC32 Ethernet Starter Kit . | To run the demo, the following additional hardware are required: . | Microchip CAN Bus Analyzer | Starter Kit I/O Expansion Board | CAN/LIN PICtail (Plus) Daughter Board | . | Install Microchip CAN Bus Analyzer software on PC | Connect J1 connector on board to J1 connector on Starter Kit I/O Expansion Board | Connect J4 connector on Starter Kit I/O Expansion Board to J7 connector on CAN/LIN PICtail (Plus) Daughter Board | Connect Microchip CAN Bus Analyzer to P1 connector on CAN/LIN PICtail (Plus) Daughter Board using female to female DB9 serial cable | Short (close) Jumper J5 on PIC32MX Ethernet Starter Kit II | Connect Microchip CAN Bus Analyzer to PC using USB Male-A to Male Mini-B cable | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/can/can_normal_operation_interrupt_timestamp/readme.html#setting-up-the-hardware"
  },"17": {
    "doc": "CAN interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its respective IDE | Open Microchip CAN Bus Analyzer software and make the following configurations: . | Description | Settings | . | CAN Bitrate Control | 500 Kbps | . | CAN Mode Control | Normal Mode | . | Bus Termination Control | ON | . |   |   | . | Press Switch to transmit message to CAN Bus from board | CAN message will be displayed in the CAN analyzer software | Send following CAN message from CAN analyzer software . | ID : 0x469, DLC : 8, Data: 1, 2, 3, 4, 5, 6, 7, 8 | . | LED toggles at each message transmission or reception . | Board | Switch Name | LED name | . | PIC32MX1/2/5 Starter Kit | SW1 | LED1 | . | PIC32 Ethernet Starter Kit | SW1 | LED1 | . |   |   |   | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html#running-the-application",
    "relUrl": "/apps/can/can_normal_operation_interrupt_timestamp/readme.html#running-the-application"
  },"18": {
    "doc": "CAN interrupt",
    "title": "CAN interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html",
    "relUrl": "/apps/can/can_normal_operation_interrupt_timestamp/readme.html"
  },"19": {
    "doc": "Clock configuration",
    "title": "Clock configuration",
    "content": "This example application shows how to configure the clock system to run the device at maximum frequency. It also outputs a prescaled clock signal on a GPIO pin for measurement and verification. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/clock/clock_config/readme.html#clock-configuration",
    "relUrl": "/apps/clock/clock_config/readme.html#clock-configuration"
  },"20": {
    "doc": "Clock configuration",
    "title": "Description",
    "content": "Clock system generates and distributes the clock for the processor and peripherals. This example application shows how to use the clock manager to configure the device to run at the max possible speed. A prescaled clock signal is routed to GPIO pin to measure the frequency and accuracy of the internal device clock. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/clock/clock_config/readme.html#description",
    "relUrl": "/apps/clock/clock_config/readme.html#description"
  },"21": {
    "doc": "Clock configuration",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/clock/clock_config/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/clock/clock_config/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/clock/clock_config/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "Clock configuration",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect an oscilloscope to monitor the PORT pin RPB8 (Pin number #14 on the J14 connector) | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32MX274 XLP Starter Kit . | Connect an oscilloscope to monitor the PORT pin RPC6 (Pin number #3 on the J2 connector) | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/clock/clock_config/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/clock/clock_config/readme.html#setting-up-the-hardware"
  },"23": {
    "doc": "Clock configuration",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe a clock of 4 MHz on the clock output pin | LED should be blinking continuosly | . Refer to the following table for clock output pin and LED name for different boards: . | Board | Clock output pin | LED Name | . | Curiosity PIC32MX470 Development Board | RPB8(Pin number #14 on the J14 connector) | LED1 | . | PIC32MX274 XLP Starter Kit | RPC6 (Pin number #3 on the J2 connector) | LED1 (RED) | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/clock/clock_config/readme.html#running-the-application",
    "relUrl": "/apps/clock/clock_config/readme.html#running-the-application"
  },"24": {
    "doc": "Clock configuration",
    "title": "Clock configuration",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/clock/clock_config/readme.html",
    "relUrl": "/apps/clock/clock_config/readme.html"
  },"25": {
    "doc": "CMP configurable reference",
    "title": "CMP configurable reference",
    "content": "This example application shows how to use the CMP Peripheral library to compare voltage level on the negative input with the internal configurable reference voltage. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html#cmp-configurable-reference",
    "relUrl": "/apps/cmp/cmp_configurable_reference/readme.html#cmp-configurable-reference"
  },"26": {
    "doc": "CMP configurable reference",
    "title": "Description",
    "content": "The peripheral named comparator voltage reference (CVR) can be used by the CMP peripheral. It generates a voltage that can be connected internally to the +ve input of the any of the comparators in the device. This allows to set flexible compare voltages. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html#description",
    "relUrl": "/apps/cmp/cmp_configurable_reference/readme.html#description"
  },"27": {
    "doc": "CMP configurable reference",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/cmp/cmp_configurable_reference/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cmp/cmp_configurable_reference/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "CMP configurable reference",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to the USB UART click board and PC | Pin 11 (C1INC) on J14 is the negative input, connect it to a voltage below the reference voltage (~2V from CVR peripheral) to trigger interrupt . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer. | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to theUSB UART click board and PC | Pin 12 (C3INB) on J2 is the negative input. Connect it to a voltage below the reference voltage (~2V from CVR peripheral) to trigger interrupt | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/cmp/cmp_configurable_reference/readme.html#setting-up-the-hardware"
  },"29": {
    "doc": "CMP configurable reference",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Following message is output on console: . | Board | Console output | . | Curiosity PIC32MX470 Development Board | | . | PIC32MX274 XLP Starter Kit | | . |   |   | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html#running-the-application",
    "relUrl": "/apps/cmp/cmp_configurable_reference/readme.html#running-the-application"
  },"30": {
    "doc": "CMP configurable reference",
    "title": "CMP configurable reference",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html",
    "relUrl": "/apps/cmp/cmp_configurable_reference/readme.html"
  },"31": {
    "doc": "CORETIMER periodic interrupt",
    "title": "CORETIMER periodic interrupt",
    "content": "This example application shows how to use the CoreTimer to generate periodic interrupts. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html#coretimer-periodic-interrupt",
    "relUrl": "/apps/coretimer/coretimer_periodic_timeout/readme.html#coretimer-periodic-interrupt"
  },"32": {
    "doc": "CORETIMER periodic interrupt",
    "title": "Description",
    "content": "This example application configures the CoreTimer Peripheral Library to generate periodic interrupts. The application registers a periodic timeout callback. It toggles an LED every time the callback is triggered. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html#description",
    "relUrl": "/apps/coretimer/coretimer_periodic_timeout/readme.html#description"
  },"33": {
    "doc": "CORETIMER periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/coretimer/coretimer_periodic_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/coretimer/coretimer_periodic_timeout/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "CORETIMER periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/coretimer/coretimer_periodic_timeout/readme.html#setting-up-the-hardware"
  },"35": {
    "doc": "CORETIMER periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | LED Blinks continuosly | . The following table provides the details of LED: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32 Ethernet Starter Kit | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . | PIC32MX Starter Kit | LED3 (GREEN) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html#running-the-application",
    "relUrl": "/apps/coretimer/coretimer_periodic_timeout/readme.html#running-the-application"
  },"36": {
    "doc": "CORETIMER periodic interrupt",
    "title": "CORETIMER periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html",
    "relUrl": "/apps/coretimer/coretimer_periodic_timeout/readme.html"
  },"37": {
    "doc": "DMAC CRC-32 Generation",
    "title": "DMAC CRC-32 Generation",
    "content": "This example application demonstrates how to use the DMAC peripheral to compute 32-bit Cyclic Redundancy Checksum (CRC). ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html#dmac-crc-32-generation",
    "relUrl": "/apps/dmac/dmac_crc32_generate/readme.html#dmac-crc-32-generation"
  },"38": {
    "doc": "DMAC CRC-32 Generation",
    "title": "Description",
    "content": "The DMAC unit provides support for calculating a CRC-16 and CRC-32 value for data passing through any DMA channel. This example application computes the 32-bit CRC value for the poynomial (0x04C11DB7) using the CRC engine in DMAC peripheral. It uses a DMA Channel with software trigger to initiate a memory-memory transfer from the source buffer to the destination buffer with 8-bit beat size. Once the transfer is completed a 32-bit CRC will be generated for the source buffer. Once the hardware CRC is generated using a DMA Channel it is validated using a software-calculated CRC value. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html#description",
    "relUrl": "/apps/dmac/dmac_crc32_generate/readme.html#description"
  },"39": {
    "doc": "DMAC CRC-32 Generation",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dmac/dmac_crc32_generate/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dmac/dmac_crc32_generate/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "DMAC CRC-32 Generation",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dmac/dmac_crc32_generate/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "DMAC CRC-32 Generation",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Following message is output on console: . | Expected CRC Value for the polynomial (0x04C11DB7) is (0xcbf43926) | . | The LED indicates the success or failure: . | LED is turned ON when the DMAC memory transfer is successful and hardware CRC value matches with the software calculated CRC value | . | . Following table provides LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html#running-the-application",
    "relUrl": "/apps/dmac/dmac_crc32_generate/readme.html#running-the-application"
  },"42": {
    "doc": "DMAC CRC-32 Generation",
    "title": "DMAC CRC-32 Generation",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html",
    "relUrl": "/apps/dmac/dmac_crc32_generate/readme.html"
  },"43": {
    "doc": "DMAC memory transfer",
    "title": "DMAC memory transfer",
    "content": "This example application demonstrates how to use the DMAC peripheral to do a memory to memory transfer. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html#dmac-memory-transfer",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#dmac-memory-transfer"
  },"44": {
    "doc": "DMAC memory transfer",
    "title": "Description",
    "content": "The application uses a software trigger to initiate a memory-memory transfer from the source buffer to the destination buffer with 16-bit beat size and 32-bit beat size. Transfer status is reported on console. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html#description",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#description"
  },"45": {
    "doc": "DMAC memory transfer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dmac/dmac_memory_transfer/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "DMAC memory transfer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#setting-up-the-hardware"
  },"47": {
    "doc": "DMAC memory transfer",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Following message is output on console: . | The LED indicates the success or failure: . | The LED is turned ON when the DMAC memory transfer is successful | . | . Following table provides LED names: . | Board | LED Name |   | . | Curiosity PIC32MX470 Development Board | LED1 |   | . | PIC32MX274 XLP Starter Kit | LED1 (RED) |   | . | PIC32MX Starter Kit | LED3 (GREEN) |   | . |   |   |   | . Note: For PIC32MX Starter Kit, console output is not applicable . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html#running-the-application",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#running-the-application"
  },"48": {
    "doc": "DMAC memory transfer",
    "title": "DMAC memory transfer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html"
  },"49": {
    "doc": "DMAC usart echo",
    "title": "DMAC usart echo",
    "content": "This example application demonstrates USART transfer with DMA to receive 10 bytes and echo back the received bytes . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html#dmac-usart-echo",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#dmac-usart-echo"
  },"50": {
    "doc": "DMAC usart echo",
    "title": "Description",
    "content": "This application demonstrates USART transfer with DMA using SERCOM peripheral configured in USART mode. One DMA channel is used to receive 10 bytes of data from the USART and another DMA channel is used to echo back the received bytes. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html#description",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#description"
  },"51": {
    "doc": "DMAC usart echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dmac/dmac_usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "DMAC usart echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#setting-up-the-hardware"
  },"53": {
    "doc": "DMAC usart echo",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Following message is output on console: . | Type 10 characters in the terminal. It will echo back the received bytes and toggles the LED | . The following table provides the LED name: . | Board | LED Name |   | . | Curiosity PIC32MX470 Development Board | LED1 |   | . | PIC32MX274 XLP Starter Kit | LED1 (RED) |   | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#running-the-application"
  },"54": {
    "doc": "DMAC usart echo",
    "title": "DMAC usart echo",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html"
  },"55": {
    "doc": "GPIO interrupt",
    "title": "GPIO interrupt",
    "content": "This example application demonstrate how to generate GPIO interrupt on switch press and release, and indicate the switch status using the LED. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html#gpio-interrupt",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#gpio-interrupt"
  },"56": {
    "doc": "GPIO interrupt",
    "title": "Description",
    "content": "This application uses the GPIO Peripheral library to generate callback on switch press and release, and drives the GPIO pin connected to the LED to indicate the switch status. The LED is turned ON when the switch is pressed and turned OFF when the switch is released. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html#description",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#description"
  },"57": {
    "doc": "GPIO interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/gpio/gpio_led_on_off_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#downloading-and-building-the-application"
  },"58": {
    "doc": "GPIO interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#setting-up-the-hardware"
  },"59": {
    "doc": "GPIO interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | The LED is turned ON when the switch is pressed and turned OFF when the switch is released | . The following table provides the switch and the LED name: . | Kit name | Switch Name | LED Name | . | Curiosity PIC32MX470 Development Board | S1 | LED1 | . | PIC32 Ethernet Starter Kit | SW1 | LED1 | . | PIC32MX Starter Kit | SW1 | LED3 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#running-the-application"
  },"60": {
    "doc": "GPIO interrupt",
    "title": "GPIO interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html"
  },"61": {
    "doc": "GPIO Polling",
    "title": "GPIO Polling",
    "content": "This example application demonstrate how to poll the switch input, and indicate the switch status using the LED. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html#gpio-polling",
    "relUrl": "/apps/gpio/gpio_led_on_off_polling/readme.html#gpio-polling"
  },"62": {
    "doc": "GPIO Polling",
    "title": "Description",
    "content": "This application uses the GPIO Peripheral library to read the GPIO pin connected to the switch, and drives the GPIO pin connected to the LED to indicate the switch status. The LED is turned ON when the switch is pressed and turned OFF when the switch is released. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html#description",
    "relUrl": "/apps/gpio/gpio_led_on_off_polling/readme.html#description"
  },"63": {
    "doc": "GPIO Polling",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/gpio/gpio_led_on_off_polling/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/gpio/gpio_led_on_off_polling/readme.html#downloading-and-building-the-application"
  },"64": {
    "doc": "GPIO Polling",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/gpio/gpio_led_on_off_polling/readme.html#setting-up-the-hardware"
  },"65": {
    "doc": "GPIO Polling",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | The LED is turned ON when the switch is pressed and turned OFF when the switch is released | . The following table provides the switch and the LED name: . | Kit name | Switch Name | LED Name | . | Curiosity PIC32MX470 Development Board | S1 | LED1 | . | PIC32 Ethernet Starter Kit | SW1 | LED1 | . | PIC32MX Starter Kit | SW1 | LED3 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html#running-the-application",
    "relUrl": "/apps/gpio/gpio_led_on_off_polling/readme.html#running-the-application"
  },"66": {
    "doc": "GPIO Polling",
    "title": "GPIO Polling",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html",
    "relUrl": "/apps/gpio/gpio_led_on_off_polling/readme.html"
  },"67": {
    "doc": "I2C EEPROM read write",
    "title": "I2C EEPROM read write",
    "content": "This example application demonstrates how to use the I2C peripheral to write and read from the I2C serial EEPROM memory. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html#i2c-eeprom-read-write",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#i2c-eeprom-read-write"
  },"68": {
    "doc": "I2C EEPROM read write",
    "title": "Description",
    "content": "This example uses the I2C peripheral library to write an array of values to the I2C Serial EEPROM and verify the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#description"
  },"69": {
    "doc": "I2C EEPROM read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/i2c/master/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"70": {
    "doc": "I2C EEPROM read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the application, following additional hardware are required: . | EEPROM 3 Click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Plug the EEPROM 3 Click board into the MikroBus socket J5 of the development board | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . Setting up PIC32MX274 XLP Starter Kit . | To run the application, following additional hardware are required: . | EEPROM 3 Click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | Plug the EEPROM 3 Click board into the MikroBus socket J5 of the development board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"71": {
    "doc": "I2C EEPROM read write",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE -LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . Following table provides LED names: . | Board | LED Name |   | . | Curiosity PIC32MX470 Development Board | LED1 |   | . | PIC32MX274 XLP Starter Kit | LED1 (RED) |   | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#running-the-application"
  },"72": {
    "doc": "I2C EEPROM read write",
    "title": "I2C EEPROM read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html"
  },"73": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "I2C EEPROM emulation (I2C slave)",
    "content": "This example application demonstrates how to use the I2C peripheral in slave mode. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html#i2c-eeprom-emulation-i2c-slave",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#i2c-eeprom-emulation-i2c-slave"
  },"74": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Description",
    "content": "This example uses the I2C peripheral library in slave mode and emulates an EEPROM of 512 bytes. There are two pages each of size 256 bytes. I2C slave expects two bytes of memory address from the I2C master and the memory address can range from 0x00 to 0x1FF. I2C slave application supports following: . Byte Write: The I2C master sends the slave address, followed by two bytes of memory address. The slave provides the data present at the requested memory address. Page Write: A page write is initiated the same way as a byte write, but the I2C master can write up-to 256 bytes (1 page). If more than 256 bytes are sent by the I2C master to the I2C slave, the memory address will “roll over” and previous data will be overwritten. The address “roll over” during write is from the last byte of the current page to the first byte of the same page. Current Address Read: The internal memory address counter maintains the last address accessed during the last read or write operation, incremented by one. Once the device address with the read/write bit set to one is clocked in and acknowledged by the EEPROM, the data byte at the current address is serially clocked out. After reading the data from the current address, the I2C master sends NAK and generates a STOP condition. Random Read: The I2C master writes the 2 byte memory address and then reads the data from that memory address. After reading the data, the I2C master sends NAK and generates a STOP condition. Sequential Read: Sequential reads are initiated by either a current address read or a random address read. As long as the EEPROM receives an acknowledge, it will continue to increment the memory address and serially clock out sequential data bytes. When the memory address limit is reached (0x1FF), the memory address will “roll over” to 0x00 and the sequential read will continue. The sequential read operation is terminated when the I2C master sends a NAK and generates a STOP condition. To run the application, two evaluation kits will be required - one acting as the I2C master and the other as the I2C slave. The I2C master application to be used for this demo application is available under apps/i2c/master/i2c_eeprom/firmware folder. I2C master writes an array of values to the I2C slave and verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html#description",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#description"
  },"75": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Downloading and building the application",
    "content": "To download or clone this application from Github, go to the top level of the repository and click . Path of the application within the repository is apps/i2c/slave/i2c_eeprom_emulation/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#downloading-and-building-the-application"
  },"76": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . |   |   | . Hardware setup requires two boards, one acting as the I2C Master and the other as the I2C slave. Setting up Curiosity PIC32MX470 Development Board . | On MikroBus header J5, connect I2C SDA and I2C SCL lines with the corresponding SDA and SCL lines of the I2C master | Connect a ground wire from Pin 8 of MikroBus header to the ground of the I2C master board | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#setting-up-the-hardware"
  },"77": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Running the Application",
    "content": ". | Build and program I2C EEPROM application from apps/i2c/master/i2c_eeprom/firmware onto the evaluation kit used as I2C master | Build and Program I2C slave application onto the evaluation kit used as I2C slave | Run application on I2C slave board and then run the application on I2C master board | LED on the I2C master board indicates success or failure: . | The LED is turned ON when the value read from the I2C slave matches with the written value | The LED is turned OFF when the value read from the I2C slave did not match with the written value | . | . Following table provides LED names on I2C master board: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html#running-the-application",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#running-the-application"
  },"78": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "I2C EEPROM emulation (I2C slave)",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html"
  },"79": {
    "doc": "ICAP capture mode",
    "title": "ICAP capture mode",
    "content": "This example application shows how to use the ICAP peripheral to measure the pulse width of the input signal. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html#icap-capture-mode",
    "relUrl": "/apps/icap/icap_capture_mode/readme.html#icap-capture-mode"
  },"80": {
    "doc": "ICAP capture mode",
    "title": "Description",
    "content": "In this application, a pulse signal is generated using the OCMP peripheral and is fed to the ICAP input. ICAP peripheral captures the time at every edge and displays the pulse width on the serial terminal. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html#description",
    "relUrl": "/apps/icap/icap_capture_mode/readme.html#description"
  },"81": {
    "doc": "ICAP capture mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/icap/icap_capture_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/icap/icap_capture_mode/readme.html#downloading-and-building-the-application"
  },"82": {
    "doc": "ICAP capture mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect the OC3 pin RPG8 (Pin 13 of the J14) to the IC1 pin RPG9 (pin 10 of the J14) | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect the OC2 pin RB1 (Pin 5 of the J16) to the IC2 pin RB0 (pin 4 of the J16) | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/icap/icap_capture_mode/readme.html#setting-up-the-hardware"
  },"83": {
    "doc": "ICAP capture mode",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Console displays the captured pulse width as shown below: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html#running-the-application",
    "relUrl": "/apps/icap/icap_capture_mode/readme.html#running-the-application"
  },"84": {
    "doc": "ICAP capture mode",
    "title": "ICAP capture mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html",
    "relUrl": "/apps/icap/icap_capture_mode/readme.html"
  },"85": {
    "doc": "NVM flash read write",
    "title": "NVM flash read write",
    "content": "This example application demonstrates how to use the NVM to erase and program the internal Flash memory. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html#nvm-flash-read-write",
    "relUrl": "/apps/nvm/flash_read_write/readme.html#nvm-flash-read-write"
  },"86": {
    "doc": "NVM flash read write",
    "title": "Description",
    "content": "This example uses the NVM peripheral library to erase a page and write an array of values to the internal Flash memory. It verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html#description",
    "relUrl": "/apps/nvm/flash_read_write/readme.html#description"
  },"87": {
    "doc": "NVM flash read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/nvm/flash_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/nvm/flash_read_write/readme.html#downloading-and-building-the-application"
  },"88": {
    "doc": "NVM flash read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/nvm/flash_read_write/readme.html#setting-up-the-hardware"
  },"89": {
    "doc": "NVM flash read write",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its respective IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the Flash matched with the written value | . | . Following table provides the LED name: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32 Ethernet Starter Kit | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . | PIC32MX Starter Kit | LED3 (GREEN) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html#running-the-application",
    "relUrl": "/apps/nvm/flash_read_write/readme.html#running-the-application"
  },"90": {
    "doc": "NVM flash read write",
    "title": "NVM flash read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html",
    "relUrl": "/apps/nvm/flash_read_write/readme.html"
  },"91": {
    "doc": "OCMP compare mode",
    "title": "OCMP compare mode",
    "content": "This example application shows how to use the OCMP peripheral to generate an active low, active high, and toggle output on compare match. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html#ocmp-compare-mode",
    "relUrl": "/apps/ocmp/ocmp_compare_mode/readme.html#ocmp-compare-mode"
  },"92": {
    "doc": "OCMP compare mode",
    "title": "Description",
    "content": "In this application, three OCMP modules are used to generate waveforms. Active Low Output: By default output is set as high and it is set as low on the compare match . Active High Output: By default output is set as low and it is set as high on the compare match . Toggled Output: Compare match toggles the output . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html#description",
    "relUrl": "/apps/ocmp/ocmp_compare_mode/readme.html#description"
  },"93": {
    "doc": "OCMP compare mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/ocmp/ocmp_compare_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/ocmp/ocmp_compare_mode/readme.html#downloading-and-building-the-application"
  },"94": {
    "doc": "OCMP compare mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/ocmp/ocmp_compare_mode/readme.html#setting-up-the-hardware"
  },"95": {
    "doc": "OCMP compare mode",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | Observe active low, active high and toggle output on the oscilloscope . | Refer the following table for pin details: . | OCMP output | Curiosity PIC32MX470 Development Board pins | PIC32 Ethernet Starter Kit and PIC32MX Starter Kit pins | PIC32MX274 XLP Starter Kit pins | . | OC1 output | RPD0 “Pin 6 of J14” | RD0 “LED1” | RC7 “Pin 5 of J2” | . | OC2 output | RPG9 “Pin 10 of J14” | RD1 “LED2” | RA8 “Pin 13 of J2” | . | OC3 output | RPB9 “Pin 3 of J14” | RD2 “LED3” | RB14 “Pin 12 of J2” | . |   |   |   |   | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html#running-the-application",
    "relUrl": "/apps/ocmp/ocmp_compare_mode/readme.html#running-the-application"
  },"96": {
    "doc": "OCMP compare mode",
    "title": "OCMP compare mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html",
    "relUrl": "/apps/ocmp/ocmp_compare_mode/readme.html"
  },"97": {
    "doc": "Low Power Modes",
    "title": "Low Power Modes",
    "content": "This example application demonstrates how to use different low power modes of the device. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/power/low_power_modes/readme.html#low-power-modes",
    "relUrl": "/apps/power/low_power_modes/readme.html#low-power-modes"
  },"98": {
    "doc": "Low Power Modes",
    "title": "Description",
    "content": "This example application demonstrates how to use different low power modes of the device. It allows user to put the device in Idle, Sleep and Deep Sleep modes. Further, device can be woken up from these low power modes upon switch press. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/power/low_power_modes/readme.html#description",
    "relUrl": "/apps/power/low_power_modes/readme.html#description"
  },"99": {
    "doc": "Low Power Modes",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/power/low_power_modes/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/power/low_power_modes/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/power/low_power_modes/readme.html#downloading-and-building-the-application"
  },"100": {
    "doc": "Low Power Modes",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/power/low_power_modes/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/power/low_power_modes/readme.html#setting-up-the-hardware"
  },"101": {
    "doc": "Low Power Modes",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | See the following message in the console: . | LED should be continously blinking | Follow the instructions on console to verify different low power modes | . Following table provides the LED names: . | Board | LED Name | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/power/low_power_modes/readme.html#running-the-application",
    "relUrl": "/apps/power/low_power_modes/readme.html#running-the-application"
  },"102": {
    "doc": "Low Power Modes",
    "title": "Low Power Modes",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/power/low_power_modes/readme.html",
    "relUrl": "/apps/power/low_power_modes/readme.html"
  },"103": {
    "doc": "RCON reset handler",
    "title": "RCON reset handler",
    "content": "This example shows how to use the RCON peripheral to indicate the cause of the device reset and clear the reset causes. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html#rcon-reset-handler",
    "relUrl": "/apps/rcon/reset_handler/readme.html#rcon-reset-handler"
  },"104": {
    "doc": "RCON reset handler",
    "title": "Description",
    "content": "The Reset module combines all Reset sources and controls the device Master Reset signal, SYSRST. The Reset module allows the reset source to be identified and it clears the reset cause through software. The following is a list of device Reset sources: . | POR: Power-on Reset | MCLR: Master Clear Reset pin | SWR: Software Reset | WDTR: Watchdog Timer Reset | BOR: Brown-out Reset | CMR: Configuration Mismatch Reset | HVDR: High Voltage Detect Reset | . This example application uses the RCON peripheral to indicate the MCLR and the Watchdog reset. The WDT reset is emulated by not feeding the watchdog on switch press. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html#description",
    "relUrl": "/apps/rcon/reset_handler/readme.html#description"
  },"105": {
    "doc": "RCON reset handler",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rcon/reset_handler/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rcon/reset_handler/readme.html#downloading-and-building-the-application"
  },"106": {
    "doc": "RCON reset handler",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rcon/reset_handler/readme.html#setting-up-the-hardware"
  },"107": {
    "doc": "RCON reset handler",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Following message is output on console: . | Watch timer is fed periodically using Core Timer to prevent the WDT reset and the LED is toggled . | Following table provides the switch and the LED name: | . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | Press the switch to put the system in deadlock | LED should stop blinking and the console should print the following message . | The WDT will reset the device in four seconds and the demonstration should restart | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html#running-the-application",
    "relUrl": "/apps/rcon/reset_handler/readme.html#running-the-application"
  },"108": {
    "doc": "RCON reset handler",
    "title": "RCON reset handler",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html",
    "relUrl": "/apps/rcon/reset_handler/readme.html"
  },"109": {
    "doc": "RTCC alarm interrupt",
    "title": "RTCC alarm interrupt",
    "content": "This example application shows how to use the RTCC to configure the time and generate the alarm. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html#rtcc-alarm-interrupt",
    "relUrl": "/apps/rtcc/rtcc_alarm/readme.html#rtcc-alarm-interrupt"
  },"110": {
    "doc": "RTCC alarm interrupt",
    "title": "Description",
    "content": "This example application shows how to setup RTCC time and configure alarm using the RTCC Peripheral Library. The application sets up an alarm to be generated every day at a specified time. A message is sent via the Virtual COM port on the alarm trigger. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html#description",
    "relUrl": "/apps/rtcc/rtcc_alarm/readme.html#description"
  },"111": {
    "doc": "RTCC alarm interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtcc/rtcc_alarm/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtcc/rtcc_alarm/readme.html#downloading-and-building-the-application"
  },"112": {
    "doc": "RTCC alarm interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtcc/rtcc_alarm/readme.html#setting-up-the-hardware"
  },"113": {
    "doc": "RTCC alarm interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Console output will be as given below in the beginning: | Once alarm triggers, following will be console output: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html#running-the-application",
    "relUrl": "/apps/rtcc/rtcc_alarm/readme.html#running-the-application"
  },"114": {
    "doc": "RTCC alarm interrupt",
    "title": "RTCC alarm interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html",
    "relUrl": "/apps/rtcc/rtcc_alarm/readme.html"
  },"115": {
    "doc": "SPI EEPROM write read",
    "title": "SPI EEPROM write read",
    "content": "This example application demonstrates how to use the SPI peripheral to write and read from the SPI serial EEPROM memory. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html#spi-eeprom-write-read",
    "relUrl": "/apps/spi/master/spi_eeprom_write_read/readme.html#spi-eeprom-write-read"
  },"116": {
    "doc": "SPI EEPROM write read",
    "title": "Description",
    "content": "This example uses the SPI peripheral library to write an array of values to the SPI Serial EEPROM and verify the value written by reading the values back and comparing it to the value written. The example application performs the EEPROM writing only once after a power on reset. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html#description",
    "relUrl": "/apps/spi/master/spi_eeprom_write_read/readme.html#description"
  },"117": {
    "doc": "SPI EEPROM write read",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/spi/spi_eeprom_write_read/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi/master/spi_eeprom_write_read/readme.html#downloading-and-building-the-application"
  },"118": {
    "doc": "SPI EEPROM write read",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the application, following additional hardware are required: . | EEPROM 4 Click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Plug the EEPROM 4 Click board into the MikroBus socket J5 of the development board | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . Setting up PIC32MX274 XLP Starter Kit . | To run the application, following additional hardware are required: . | EEPROM 4 Click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer. | Plug the EEPROM 4 Click board into the MikroBus socket J5 of the development board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/spi/master/spi_eeprom_write_read/readme.html#setting-up-the-hardware"
  },"119": {
    "doc": "SPI EEPROM write read",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . Following table provides LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html#running-the-application",
    "relUrl": "/apps/spi/master/spi_eeprom_write_read/readme.html#running-the-application"
  },"120": {
    "doc": "SPI EEPROM write read",
    "title": "SPI EEPROM write read",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html",
    "relUrl": "/apps/spi/master/spi_eeprom_write_read/readme.html"
  },"121": {
    "doc": "SPI blocking",
    "title": "SPI blocking",
    "content": "This example application demonstrates how to use the SPI peripheral to transmit and receive a block of data in a blocking manner. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html#spi-blocking",
    "relUrl": "/apps/spi/master/spi_self_loopback_blocking/readme.html#spi-blocking"
  },"122": {
    "doc": "SPI blocking",
    "title": "Description",
    "content": "This example demonstrates the transmit and receive operation over SPI interface in a blocking manner. The example application transmits known values from an array and verifies the data received through the loop back by comparing the transmitted data and the received data. The example application performs the loop back test only once after a power on reset. After the loop back is complete, the status of the loop back is indicated and the application remains idle. The loop back test requires the MOSI output pin to be connected to the MISO input pin so that anything transmitted will also be received. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html#description",
    "relUrl": "/apps/spi/master/spi_self_loopback_blocking/readme.html#description"
  },"123": {
    "doc": "SPI blocking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/spi/spi_self_loopback_blocking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi/master/spi_self_loopback_blocking/readme.html#downloading-and-building-the-application"
  },"124": {
    "doc": "SPI blocking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Use a jumper wire to short pin MOSI and pin MISO of the J5 connector | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . Setting up PIC32MX274 XLP Starter Kit . | Use a jumper wire to short pin MOSI and pin MISO of the J5 connector | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/spi/master/spi_self_loopback_blocking/readme.html#setting-up-the-hardware"
  },"125": {
    "doc": "SPI blocking",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | LED indicates the success or failure: . | LED is turned ON when the when the value received matched with the transmitted value | LED is turned OFF when the when the value received did not match with the transmitted value | . | . Following table provides LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html#running-the-application",
    "relUrl": "/apps/spi/master/spi_self_loopback_blocking/readme.html#running-the-application"
  },"126": {
    "doc": "SPI blocking",
    "title": "SPI blocking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html",
    "relUrl": "/apps/spi/master/spi_self_loopback_blocking/readme.html"
  },"127": {
    "doc": "SPI interrupt",
    "title": "SPI interrupt",
    "content": "This example application demonstrates how to use the SPI peripheral to transmit and receive a block of data using interrupt. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html#spi-interrupt",
    "relUrl": "/apps/spi/master/spi_self_loopback_interrupt/readme.html#spi-interrupt"
  },"128": {
    "doc": "SPI interrupt",
    "title": "Description",
    "content": "This example shows the transmit and receive operation over a SPI interface in a non-blocking manner. The peripheral interrupt is used to manage the transfer.The example application transmits known values from an array and verifies the data received through the loop back by comparing the transmitted data and the received data. The example application performs the loop back test only once after a power on reset. After the loop back is complete, the status of the loop back is indicated and the application remains idle. The loop back test requires the MOSI output pin to be connected to the MISO input pin so that anything transmitted will also be received. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html#description",
    "relUrl": "/apps/spi/master/spi_self_loopback_interrupt/readme.html#description"
  },"129": {
    "doc": "SPI interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/spi/spi_self_loopback_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi/master/spi_self_loopback_interrupt/readme.html#downloading-and-building-the-application"
  },"130": {
    "doc": "SPI interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Use a jumper wire to short pin MOSI and pin MISO of the J5 connector | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . Setting up PIC32MX274 XLP Starter Kit . | Use a jumper wire to short pin MOSI and pin MISO of the J5 connector | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/spi/master/spi_self_loopback_interrupt/readme.html#setting-up-the-hardware"
  },"131": {
    "doc": "SPI interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | LED indicates the success or failure: . | LED is turned ON when the when the value received matched with the transmitted value | LED is turned OFF when the when the value received did not match with the transmitted value | . | . Following table provides LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/spi/master/spi_self_loopback_interrupt/readme.html#running-the-application"
  },"132": {
    "doc": "SPI interrupt",
    "title": "SPI interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html",
    "relUrl": "/apps/spi/master/spi_self_loopback_interrupt/readme.html"
  },"133": {
    "doc": "SPI Master read write test application",
    "title": "SPI Master read write test application",
    "content": "This is a SPI Master test application which is provided to demonstrate communication between SPI master and the corresponding SPI slave application available under - apps/spi/slave/spi_write_read/firmware . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html#spi-master-read-write-test-application",
    "relUrl": "/apps/spi/master/spi_write_read_test_app/readme.html#spi-master-read-write-test-application"
  },"134": {
    "doc": "SPI Master read write test application",
    "title": "Description",
    "content": "This example uses the SPI peripheral library in master mode and serves as a test application to demonstrate communication between SPI master and corresponding SPI slave application available at apps/spi/slave/spi_write_read/firmware. The SPI master writes data by sending a write command followed by two bytes of memory address followed by the data to be written. &lt; WR_CMD &gt; &lt; ADDR_MSB &gt; &lt; ADDR_LSB &gt; &lt; DATA0 &gt; … &lt; DATA n &gt; . The SPI slave asserts the Busy line to indicate to the SPI master that it is busy. Once ready, the SPI slave de-asserts the Busy line. Once the SPI slave is ready, the SPI master reads the data by sending read command followed by two bytes of memory address and the number of bytes to read. &lt; RD_CMD &gt; &lt; ADDR_MSB &gt; &lt; ADDR_LSB &gt; &lt; NUM_BYTES &gt; . The SPI slave responds by sending the data at the requested memory address. The SPI master compares the sent data with the received data and repeats the test if it matches. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html#description",
    "relUrl": "/apps/spi/master/spi_write_read_test_app/readme.html#description"
  },"135": {
    "doc": "SPI Master read write test application",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/spi/master/spi_write_read_test_app/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi/master/spi_write_read_test_app/readme.html#downloading-and-building-the-application"
  },"136": {
    "doc": "SPI Master read write test application",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run this demo two Curiosity PIC32MX470 Development Board are required. One will be progammed as SPI master and other will be programmed as SPI slave. | Connect Pin 3, 4, 5, 6 of mikroBus header J5 on SPI master to Pin 3, 4, 6, 5 respectively of mikroBus header J5 on SPI slave . | Pin 3 - SPI Chip Select | Pin 4 - SCK | Pin 5 - SDI | Pin 6 - SDO | . | Connect Pin 1 of mikroBus header J5 on SPI master to Pin 1 of mikroBus header J5 on SPI slave. Pin 1 (RB4) is configured as GPIO and serves as the slave busy pin. | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/spi/master/spi_write_read_test_app/readme.html#setting-up-the-hardware"
  },"137": {
    "doc": "SPI Master read write test application",
    "title": "Running the Application",
    "content": ". | Build and Program the SPI master application project using its IDE | Build and Program the SPI slave application project using its IDE. Path of the SPI Slave application within the repository is apps/spi/slave/spi_write_read/firmware | On the SPI master board, press switch to start reading and writing data | LED on SPI master board indicates the success or failure: . | LED is turned ON when the data read from the SPI slave matches with the data written | LED is turned OFF when the data read from the SPI slave does not match with the data written | . | . Following table provides the Switch and LED name: . | Board | Switch Name | LED Name | . | Curiosity PIC32MX470 Development Board | S1 | LED1 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html#running-the-application",
    "relUrl": "/apps/spi/master/spi_write_read_test_app/readme.html#running-the-application"
  },"138": {
    "doc": "SPI Master read write test application",
    "title": "SPI Master read write test application",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html",
    "relUrl": "/apps/spi/master/spi_write_read_test_app/readme.html"
  },"139": {
    "doc": "SPI Slave read write",
    "title": "SPI Slave read write",
    "content": "This example application demonstrates how to use the SPI peripheral in slave mode . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html#spi-slave-read-write",
    "relUrl": "/apps/spi/slave/spi_write_read/readme.html#spi-slave-read-write"
  },"140": {
    "doc": "SPI Slave read write",
    "title": "Description",
    "content": "This example uses the SPI peripheral library in slave mode and allows reading and writing data from/to its internal buffer by a SPI master. The SPI master writes data by sending a write command followed by two bytes of memory address followed by the data to be written. &lt; WR_CMD &gt; &lt; ADDR_MSB &gt; &lt; ADDR_LSB &gt; &lt; DATA0 &gt; … &lt; DATA n &gt; . The SPI slave asserts the Busy line to indicate to the SPI master that it is busy. Once ready, the SPI slave de-asserts the Busy line. Once the SPI slave is ready, the SPI master reads the data by sending read command followed by two bytes of memory address and the number of bytes to read. &lt; RD_CMD &gt; &lt; ADDR_MSB &gt; &lt; ADDR_LSB &gt; &lt; NUM_BYTES &gt; . The SPI slave responds by sending the data at the requested memory address. The SPI master compares the sent data with the received data and repeats the test if it matches. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html#description",
    "relUrl": "/apps/spi/slave/spi_write_read/readme.html#description"
  },"141": {
    "doc": "SPI Slave read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/spi/slave/spi_write_read/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/spi/slave/spi_write_read/readme.html#downloading-and-building-the-application"
  },"142": {
    "doc": "SPI Slave read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run this demo two Curiosity PIC32MX470 Development Board are required. One will be progammed as SPI master and other will be programmed as SPI slave. | Connect Pin 3, 4, 5, 6 of mikroBus header J5 on SPI master to Pin 3, 4, 6, 5 respectively of mikroBus header J5 on SPI slave . | Pin 3 - SPI Chip Select | Pin 4 - SCK | Pin 5 - SDI | Pin 6 - SDO | . | Connect Pin 1 of mikroBus header J5 on SPI master to Pin 1 of mikroBus header J5 on SPI slave. Pin 1 (RB4) is configured as GPIO and serves as the slave busy pin. | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/spi/slave/spi_write_read/readme.html#setting-up-the-hardware"
  },"143": {
    "doc": "SPI Slave read write",
    "title": "Running the Application",
    "content": ". | Build and Program the SPI master application project using its IDE. Path of the SPI master application within the repository is apps/spi/master/spi_write_read_test_app/firmware | Build and Program the SPI slave application project using its IDE | On the SPI master board, press switch to start reading and writing data | LED on SPI master board indicates the success or failure: . | LED is turned ON when the data read from the SPI slave matches with the data written | LED is turned OFF when the data read from the SPI slave does not match with the data written | . | . Following table provides the Switch and LED name: . | Board | Switch Name | LED Name | . | Curiosity PIC32MX470 Development Board | S1 | LED1 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html#running-the-application",
    "relUrl": "/apps/spi/slave/spi_write_read/readme.html#running-the-application"
  },"144": {
    "doc": "SPI Slave read write",
    "title": "SPI Slave read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html",
    "relUrl": "/apps/spi/slave/spi_write_read/readme.html"
  },"145": {
    "doc": "TMR periodic interrupt",
    "title": "TMR periodic interrupt",
    "content": "This example demonstrates how to use the TMR module in timer mode to generate periodic interrupt. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html#tmr-periodic-interrupt",
    "relUrl": "/apps/tmr/tmr_timer_mode/readme.html#tmr-periodic-interrupt"
  },"146": {
    "doc": "TMR periodic interrupt",
    "title": "Description",
    "content": "The TMR module generates periodic interrupt on 1 second period match. The LED is toggled in the interrupt handler to indicate periodic callback. Two TMR modules are used to form a 32-bit timer. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html#description",
    "relUrl": "/apps/tmr/tmr_timer_mode/readme.html#description"
  },"147": {
    "doc": "TMR periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tmr/tmr_timer_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_125_sk.X | MPLABX project for PIC32MX1/2/5 Starter Kit | . | pic32mx_12_sk.X | MPLABX project for MPLAB Starter Kit for PIC32MX1XX/2XX | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_usb_sk3.X | MPLABX project for PIC32 USB Starter Kit III | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tmr/tmr_timer_mode/readme.html#downloading-and-building-the-application"
  },"148": {
    "doc": "TMR periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_125_sk.X | PIC32MX1/2/5 Starter Kit | . | pic32mx_12_sk.X | MPLAB Starter Kit for PIC32MX1XX/2XX | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_usb_sk3.X | PIC32 USB Starter Kit III | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32MX1/2/5 Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up MPLAB Starter Kit for PIC32MX1XX/2XX . | Connect mini USB cable to the ‘Debug USB’ connector(J4) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32 USB Starter Kit III . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tmr/tmr_timer_mode/readme.html#setting-up-the-hardware"
  },"149": {
    "doc": "TMR periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | On successful execution, LED starts blinking | . Following table provides the LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32MX1/2/5 Starter Kit | LED1 | . | MPLAB Starter Kit for PIC32MX1XX/2XX | LED(D1) | . | PIC32 Ethernet Starter Kit | LED1 | . | PIC32 USB Starter Kit III | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . | PIC32MX Starter Kit | LED3 (GREEN) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html#running-the-application",
    "relUrl": "/apps/tmr/tmr_timer_mode/readme.html#running-the-application"
  },"150": {
    "doc": "TMR periodic interrupt",
    "title": "TMR periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html",
    "relUrl": "/apps/tmr/tmr_timer_mode/readme.html"
  },"151": {
    "doc": "TMR1 periodic interrupt",
    "title": "TMR1 periodic interrupt",
    "content": "This example demonstrates how to use the TMR1 module in timer mode to generate periodic interrupt. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html#tmr1-periodic-interrupt",
    "relUrl": "/apps/tmr1/tmr1_timer_mode/readme.html#tmr1-periodic-interrupt"
  },"152": {
    "doc": "TMR1 periodic interrupt",
    "title": "Description",
    "content": "The TMR1 module generates 100 ms periodic interrupt. The LED is toggled in the interrupt handler to indicate periodic callback. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html#description",
    "relUrl": "/apps/tmr1/tmr1_timer_mode/readme.html#description"
  },"153": {
    "doc": "TMR1 periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tmr1/tmr1_timer_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | MPLABX project for PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tmr1/tmr1_timer_mode/readme.html#downloading-and-building-the-application"
  },"154": {
    "doc": "TMR1 periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_eth_sk2.X | PIC32 Ethernet Starter Kit | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . Setting up PIC32 Ethernet Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J7) on the board to the computer | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tmr1/tmr1_timer_mode/readme.html#setting-up-the-hardware"
  },"155": {
    "doc": "TMR1 periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE | On successful execution, LED starts blinking | . Following table provides the LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32 Ethernet Starter Kit | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html#running-the-application",
    "relUrl": "/apps/tmr1/tmr1_timer_mode/readme.html#running-the-application"
  },"156": {
    "doc": "TMR1 periodic interrupt",
    "title": "TMR1 periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html",
    "relUrl": "/apps/tmr1/tmr1_timer_mode/readme.html"
  },"157": {
    "doc": "UART echo blocking",
    "title": "UART echo blocking",
    "content": "This example application demonstrates how to use the UART peripheral to transfer a block of data in a blocking manner. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html#uart-echo-blocking",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#uart-echo-blocking"
  },"158": {
    "doc": "UART echo blocking",
    "title": "Description",
    "content": "This example shows the read and write operation over a UART in a blocking manner. The CPU polls the peripheral register continuously to manage the transfer. It receives a line of characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html#description",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#description"
  },"159": {
    "doc": "UART echo blocking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/uart/uart_echo_blocking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#downloading-and-building-the-application"
  },"160": {
    "doc": "UART echo blocking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#setting-up-the-hardware"
  },"161": {
    "doc": "UART echo blocking",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | See the following message in the console: . | Type a line of characters and press the Enter key | Entered line will be echoed back and the LED is toggled | . Following table provides the LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html#running-the-application",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#running-the-application"
  },"162": {
    "doc": "UART echo blocking",
    "title": "UART echo blocking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html"
  },"163": {
    "doc": "UART echo interrupt",
    "title": "UART echo interrupt",
    "content": "This example application demonstrates how to use the UART peripheral to transfer a block of data in a non-blocking manner. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html#uart-echo-interrupt",
    "relUrl": "/apps/uart/uart_echo_interrupt/readme.html#uart-echo-interrupt"
  },"164": {
    "doc": "UART echo interrupt",
    "title": "Description",
    "content": "This example shows the read and write operation over a UART in a non-blocking manner. The peripheral interrupt is used to manage the transfer. It receives 10 characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html#description",
    "relUrl": "/apps/uart/uart_echo_interrupt/readme.html#description"
  },"165": {
    "doc": "UART echo interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/uart/uart_echo_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart/uart_echo_interrupt/readme.html#downloading-and-building-the-application"
  },"166": {
    "doc": "UART echo interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/uart/uart_echo_interrupt/readme.html#setting-up-the-hardware"
  },"167": {
    "doc": "UART echo interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | See the following message in the console: . | Type 10 characters in terminal | Entered 10 characters is echoed back and LED is toggled | . Following table provides the LED names: . | Board | LED Name | . | Curiosity PIC32MX470 Development Board | LED1 | . | PIC32MX274 XLP Starter Kit | LED1 (RED) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/uart/uart_echo_interrupt/readme.html#running-the-application"
  },"168": {
    "doc": "UART echo interrupt",
    "title": "UART echo interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html",
    "relUrl": "/apps/uart/uart_echo_interrupt/readme.html"
  },"169": {
    "doc": "UART ring buffer",
    "title": "UART ring buffer",
    "content": "This example application demonstrates how to use the UART peripheral in ring buffer mode. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html#uart-ring-buffer",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#uart-ring-buffer"
  },"170": {
    "doc": "UART ring buffer",
    "title": "Description",
    "content": "This example demonstrates read and write over UART using the ring buffer mode. The UART is configured in non-blocking mode (interrupts enabled). The example asks the user to enter 10 characters. Once received, the characters are echoed back. In the process, the example demonstrates various ring buffer APIs. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html#description",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#description"
  },"171": {
    "doc": "UART ring buffer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/uart/uart_ring_buffer_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#downloading-and-building-the-application"
  },"172": {
    "doc": "UART ring buffer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX274 XLP Starter Kit . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#setting-up-the-hardware"
  },"173": {
    "doc": "UART ring buffer",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Console displays the initial transmit and receive buffer sizes | It then adds 10 characters - “0123456789” to the transmit buffer and displays the available free space in the transmit buffer after the 10 characters have been added | The message asks the user to enter 10 characters | NOTE: For this example, the “Free Space in Transmit Buffer = xx”, where xx can be anything between 117 to 127, depending on the USART baud rate and the CPU execution speed | . | Enter 10 characters on the terminal | Entered characters are echoed back on the console and message is displayed indicating that the receive notification is turned on . | For every 10 characters typed, it will be echoed back on the console . | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#running-the-application"
  },"174": {
    "doc": "UART ring buffer",
    "title": "UART ring buffer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html"
  },"175": {
    "doc": "WDT timeout",
    "title": "WDT timeout",
    "content": "This example application shows how the watchdog timer resets by not feeding the watchdog on switch press. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html#wdt-timeout",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#wdt-timeout"
  },"176": {
    "doc": "WDT timeout",
    "title": "Description",
    "content": "This example application shows how the WDT peripheral library resets the watchdog timer by not feeding the watchdog on switch press. The application sets up the watchdog to reset the device. The application also sets up the timer to blink an LED to emulate a process. A user switch press forces the device to wait in an infinite loop to emulate a deadlock. As a result a device reset is triggered as the watchdog counter overflows the bounded value. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html#description",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#description"
  },"177": {
    "doc": "WDT timeout",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/wdt/wdt_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_sk.X | MPLABX project for PIC32MX Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application"
  },"178": {
    "doc": "WDT timeout",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_sk.X | PIC32MX Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware are required: . | USB UART click board | . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable between PC and the USB UART click board . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | . Setting up PIC32MX Starter Kit . | Connect mini USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware"
  },"179": {
    "doc": "WDT timeout",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | LED should be blinking and the console displays the following message . | Press the switch to put the system in a deadlock | LED should stop blinking and the console should print the following message . | WDT will reset the device in four seconds and the demonstration should restart | . Refer the table below for details of switch and LED: . | Board | Switch Name | LED Name | . | Curiosity PIC32MX470 Development Board | S1 | LED1 | . | PIC32MX Starter Kit | SW1 | LED3 | . |   |   |   | . Note: For PIC32MX Starter Kit, console output is not applicable . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html#running-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#running-the-application"
  },"180": {
    "doc": "WDT timeout",
    "title": "WDT timeout",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html"
  },"181": {
    "doc": "ADC interrupt",
    "title": "ADC interrupt",
    "content": "This example demonstrates how to sample an analog input in interrupt mode and send the converted data to console. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html#adc-interrupt",
    "relUrl": "/apps/adc/adc_interrupt_mode/readme.html#adc-interrupt"
  },"182": {
    "doc": "ADC interrupt",
    "title": "Description",
    "content": "In this example, Analog input voltage in the range of 0 V to 3.3 V is fed to the ADC and converted value is displayed on the console. The ADC conversion is triggered by software and result is read in the conversion complete interrupt handler. ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html#description",
    "relUrl": "/apps/adc/adc_interrupt_mode/readme.html#description"
  },"183": {
    "doc": "ADC interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_interrupt_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32mx470_curiosity.X | MPLABX project for Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | MPLABX project for PIC32MX274 XLP Starter Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_interrupt_mode/readme.html#downloading-and-building-the-application"
  },"184": {
    "doc": "ADC interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32mx470_curiosity.X | Curiosity PIC32MX470 Development Board | . | pic32mx_xlp_sk.X | PIC32MX274 XLP Starter Kit | . |   |   | . Setting up Curiosity PIC32MX470 Development Board . | Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to the USB UART click board. This will enumerate the USB to UART port | AN9 pin is used for analog input | Use a jumper wire to connect Pin 3 of J14 (AN9 is mapped to Port Pin RPB9) to 3.3 V or GND or external supply Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . Setting up PIC32MX274 XLP Starter Kit . | Connect micro USB cable to the ‘Debug USB’ connector(J9) on the board to the computer | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to the USB UART click board (This will enumerate the USB to UART port) | AN7 pin, which is coming on switches S1 to S5, is used for analog input | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_interrupt_mode/readme.html#setting-up-the-hardware"
  },"185": {
    "doc": "ADC interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the “USB to UART” COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | Console displays the ADC count and the ADC input voltage . | For PIC32MX274 XLP Starter Kit, switches S1 to S5 can be pressed in different combinations to get different output | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_interrupt_mode/readme.html#running-the-application"
  },"186": {
    "doc": "ADC interrupt",
    "title": "ADC interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html",
    "relUrl": "/apps/adc/adc_interrupt_mode/readme.html"
  },"187": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/csp_apps_pic32mx/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"188": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for PIC32MX family  v3.1.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLABx applications | . | Curiosity PIC32MX470 Development Board | 27 | . | PIC32MX274 XLP Starter Kit | 21 | . | PIC32MX1/2/5 Starter Kit | 3 | . | PIC32 Ethernet Starter Kit | 9 | . | PIC32MX Starter Kit | 8 | . | MPLAB Starter Kit for PIC32MX1XX/2XX | 1 | . | PIC32 USB Starter Kit III | 1 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v5.45 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.7.0 | . | MPLAB® XC32 C/C++ Compiler v2.50 | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32mx-family--v310",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32mx-family--v310"
  },"189": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for PIC32MX family  v3.0.1",
    "content": "New Features . | Added discover.microchip.com metadata | . Bug fixes . | Same as v3.0.0 | . Known Issues . | Same as v3.0.0 | . Development Tools . | Same as v3.0.0 | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32mx-family--v301",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32mx-family--v301"
  },"190": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for PIC32MX family  v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLABx applications | . | PIC32MX274 XLP Starter Kit | 20 | . | MPLAB Starter Kit for PIC32MX1XX/2XX | 1 | . | Curiosity PIC32MX470 Development Board | 27 | . | PIC32 Ethernet Starter Kit | 9 | . | PIC32 USB Starter Kit III | 1 | . | PIC32MX1/2/5 Starter Kit | 3 | . New Features . New features added in this release are as follows: . | Applications migrated from csp repository to this new application repository for PIC32MX development boards | . Known Issues . The current known issues are as follows: . | None | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.6.0 | . | MPLAB® XC32 C/C++ Compiler v2.41 | . ",
    "url": "http://localhost:4000/csp_apps_pic32mx/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32mx-family--v300",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32mx-family--v300"
  },"191": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32mx/release_notes.html",
    "relUrl": "/release_notes.html"
  },"192": {
    "doc": "Harmony 3 peripheral library application examples for PIC32MX family",
    "title": "Harmony 3 peripheral library application examples for PIC32MX family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 peripheral library application examples for PIC32MX family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 peripheral library application examples for PIC32MX family - [Release Notes](/csp_apps_pic32mx/release_notes.html) - [MPLAB® Harmony License](/csp_apps_pic32mx/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32mx) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains peripheral library example applications | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/csp_apps_pic32mx/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [ADC interrupt](/csp_apps_pic32mx/apps/adc/adc_interrupt_mode/readme.html) | This example demonstrates how to sample an analog input in interrupt mode and send the converted data to console | [ADC polling](/csp_apps_pic32mx/apps/adc/adc_polled_mode/readme.html) | This example demonstrates how to sample an analog input in polled mode and send the converted data to console | [CAN blocking](/csp_apps_pic32mx/apps/can/can_normal_operation_blocking/readme.html) | This example application shows how to use the CAN module to transmit and receive normal CAN messages in polling mode | [CAN interrupt](/csp_apps_pic32mx/apps/can/can_normal_operation_interrupt_timestamp/readme.html) | This example application shows how to use the CAN module to transmit and receive normal CAN messages in interrupt mode | [Clock configuration](/csp_apps_pic32mx/apps/clock/clock_config/readme.html) | This example application shows how to configure the clock system to run the device at maximum frequency. It also outputs a prescaled clock signal on a GPIO pin for measurement and verification | [CMP configurable reference](/csp_apps_pic32mx/apps/cmp/cmp_configurable_reference/readme.html) | This example application shows how to use the CMP Peripheral library to compare voltage level on the negative input with the internal configurable reference voltage | [CORETIMER periodic interrupt](/csp_apps_pic32mx/apps/coretimer/coretimer_periodic_timeout/readme.html) | This example application shows how to use the CoreTimer to generate periodic interrupts | [DMAC CRC-32 Generation](/csp_apps_pic32mx/apps/dmac/dmac_crc32_generate/readme.html) | This example application demonstrates how to use the DMAC peripheral to compute 32-bit Cyclic Redundancy Checksum (CRC) | [DMAC memory transfer](/csp_apps_pic32mx/apps/dmac/dmac_memory_transfer/readme.html) | This example application demonstrates how to use the DMAC peripheral to do a memory to memory transfer | [DMAC usart echo](/csp_apps_pic32mx/apps/dmac/dmac_usart_echo/readme.html) | This example application demonstrates USART transfer with DMA to receive 10 bytes and echo back the received bytes | [GPIO interrupt](/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_interrupt/readme.html) | This example application demonstrate how to generate GPIO interrupt on switch press and release, and indicate the switch status using the LED | [GPIO Polling](/csp_apps_pic32mx/apps/gpio/gpio_led_on_off_polling/readme.html) | This example application demonstrate how to poll the switch input, and indicate the switch status using the LED | [I2C EEPROM read write](/csp_apps_pic32mx/apps/i2c/master/i2c_eeprom/readme.html) | This example application demonstrates how to use the I2C peripheral to write and read from the I2C serial EEPROM memory | [I2C EEPROM emulation (I2C slave)](/csp_apps_pic32mx/apps/i2c/slave/i2c_eeprom_emulation/readme.html) | This example application demonstrates how to use the I2C peripheral in slave mode | [ICAP capture mode](/csp_apps_pic32mx/apps/icap/icap_capture_mode/readme.html) | This example application shows how to use the ICAP peripheral to measure the pulse width of the input signal | [NVM flash read write](/csp_apps_pic32mx/apps/nvm/flash_read_write/readme.html) | This example application demonstrates how to use the NVM to erase and program the internal Flash memory | [OCMP compare mode](/csp_apps_pic32mx/apps/ocmp/ocmp_compare_mode/readme.html) | This example application shows how to use the OCMP peripheral to generate an active low, active high, and toggle output on compare match | [Low Power Modes](/csp_apps_pic32mx/apps/power/low_power_modes/readme.html) | This example application demonstrates how to use different low power modes of the device | [RCON reset handler](/csp_apps_pic32mx/apps/rcon/reset_handler/readme.html) | This example shows how to use the RCON peripheral to indicate the cause of the device reset and clear the reset causes | [RTCC alarm interrupt](/csp_apps_pic32mx/apps/rtcc/rtcc_alarm/readme.html) | This example application shows how to use the RTCC to configure the time and generate the alarm | [SPI EEPROM write read](/csp_apps_pic32mx/apps/spi/master/spi_eeprom_write_read/readme.html) | This example application demonstrates how to use the SPI peripheral to write and read from the SPI serial EEPROM memory | [SPI blocking](/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_blocking/readme.html) | This example application demonstrates how to use the SPI peripheral to transmit and receive a block of data in a blocking manner | [SPI interrupt](/csp_apps_pic32mx/apps/spi/master/spi_self_loopback_interrupt/readme.html) | This example application demonstrates how to use the SPI peripheral to transmit and receive a block of data using interrupt | [SPI Master read write test application](/csp_apps_pic32mx/apps/spi/master/spi_write_read_test_app/readme.html) | This is a SPI Master test application which is provided to demonstrate communication between SPI master and the corresponding SPI slave application available under - apps/spi/slave/spi_write_read/firmware | [SPI Slave read write](/csp_apps_pic32mx/apps/spi/slave/spi_write_read/readme.html) | This example application demonstrates how to use the SPI peripheral in slave mode | [TMR periodic interrupt](/csp_apps_pic32mx/apps/tmr/tmr_timer_mode/readme.html) | This example demonstrates how to use the TMR module in timer mode to generate periodic interrupt | [TMR1 periodic interrupt](/csp_apps_pic32mx/apps/tmr1/tmr1_timer_mode/readme.html) | This example demonstrates how to use the TMR1 module in timer mode to generate periodic interrupt | [UART echo blocking](/csp_apps_pic32mx/apps/uart/uart_echo_blocking/readme.html) | This example application demonstrates how to use the UART peripheral to transfer a block of data in a blocking manner | [UART echo interrupt](/csp_apps_pic32mx/apps/uart/uart_echo_interrupt/readme.html) | This example application demonstrates how to use the UART peripheral to transfer a block of data in a non-blocking manner | [UART ring buffer](/csp_apps_pic32mx/apps/uart/uart_ring_buffer_interrupt/readme.html) | This example application demonstrates how to use the UART peripheral in ring buffer mode | [WDT timeout](/csp_apps_pic32mx/apps/wdt/wdt_timeout/readme.html) | This example application shows how the watchdog timer resets by not feeding the watchdog on switch press | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32mx/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/csp_apps_pic32mx.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32mx/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/csp_apps_pic32mx.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32mx/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/csp_apps_pic32mx.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32mx/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/csp_apps_pic32mx.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/csp_apps_pic32mx.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/csp_apps_pic32mx.svg?style=social)]() ",
    "url": "http://localhost:4000/csp_apps_pic32mx/",
    "relUrl": "/"
  }
}
